package DynamicQueue;

public class Node {
	private int data;
	private Node next;
	
	public Node() {
		data=0;
		next=null;
	}

	public int getData() {
		return data;
	}

	public void setData(int data) {
		this.data = data;
	}

	public Node getNext() {
		return next;
	}

	public void setNext(Node value) {
		this.next = value;
	}	
}
*******************************************************************************************************
package DynamicQueue;

public class DynamicQueue {
	private Node front;
	private Node rear;
	
	public DynamicQueue() {
		front = null;
		rear = null;
	}
	
	public Node create_node(int value) {
		Node newnode = new Node();
		newnode.setData(value);
		newnode.setNext(null);
		return newnode;
	}

	public int Enqueue(int value) {
		Node newnode = create_node(value);
		if(rear==null) {
			rear=front=newnode;
		} 
		else 
		{
			rear.setNext(newnode);
			rear=newnode;
		}
		return value;
	}
	
	public int Dequeue() {
		int value=-1;
		Node temp=front;
		if(front==null) {
			System.out.println("Queue is empty");
		} 
		else 
		{
			value = front.getData();
			front = front.getNext();
			temp.setNext(null);
		}
		return value;
	}
	
	public void display() {
		Node temp=front;
		while(temp!=null) {
			System.out.print("|"+temp.getData()+"|"+"->");
			temp = temp.getNext();
		}
		System.out.println("null");
	}
}
************************************************************************************************************
package DynamicQueue;
import java.util.Scanner;

public class ClientDynamicQueue {

	public static void main(String[] args) {
		DynamicQueue q = new DynamicQueue();
		
		Scanner sc = new Scanner(System.in);
		
		int value = 0,option = 0;
		
		do {
			System.out.println("********MENU*****************");
			System.out.println("\n 1.ENQUEUE"+
								"\n 2.DEQUEUE"+
								"\n 3.display"+
								"\n 0.exit");
			System.out.println("Enter your Choice: ");
			option = sc.nextInt();
			
			switch (option) {
			case 1:{
				System.out.println("Enter values: ");
				value = sc.nextInt();
				
				q.Enqueue(value);
				break;
			}
			case 2:{
				value = q.Dequeue();
				if(value != -1) {
					System.out.println("Dequeu::"+value);
				}
				break;
			}
			case 3:{
				q.display();
				break;
			}

			case 0:{
				System.out.println("End........");
				System.exit(0);
			}
		}
		} while(option != 0);

	}

}
